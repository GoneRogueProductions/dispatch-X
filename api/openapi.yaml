openapi: 3.0.0
servers:
  - url: 'https://dispatch.eu.org/api/v1'
    description: Default server
info:
  version: 1.0.0
  title: Dispatch X API
  termsOfService: 'https://dispatch.eu.org/terms/'
  contact:
    name: Email
    email: support@dispatch.eu.org
    url: https://github.com/GoneRogueProductions/Dispatch-X
  license:
    name: MIT
    url: 'https://opensource.org/license/mit/'
  x-logo:
    url: 'https://dispatch.eu.org/assets/img/icons/logo.png'
    altText: Dispatch X logo
  description: >
    This is an **example** API to demonstrate features of OpenAPI specification

    # Introduction

    This API definition is intended to to be a good starting point for
    describing your API in 

    [OpenAPI/Swagger
    format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).

    It also demonstrates features of
    [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool
    and 

    [Redoc](https://github.com/Redocly/Redoc) documentation engine. So beyond
    the standard OpenAPI syntax we use a few 

    [vendor
    extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).


    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard,
    language-agnostic interface to REST APIs which

    allows both humans and computers to discover and understand the capabilities
    of the service without access to source

    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can 

    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what

    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  # Tags are essentialy groups of operations
  - name: chat
    description: Message operations and general chatting functions
  - name: user
    description: Operations about user info and authenticating
  - name: maintenence
    description: Operations mainly for use of developers.
  - name: stats
    description: Operations to get statistics about Dispatch.
  # TODO: Add other things here
x-tagGroups:
  - name: General
    tags:
      - chat
      - user
  - name: Developer
    tags:
      - maintenence
  - name: Other
    tags:
      - stats
paths:
  # TODO: add other things including a chatroom listing, login and user info
  /chats/send:
    post:
      security: 
        - dispatch_auth:
          - 'write:dispatch'
          - 'read:dispatch'
      tags:
        - chat
      summary: Send a message to a chatroom
      description: 'Send a message to a chatroom ID.'
      operationId: sendMessage
      responses:
        '200':
          description: OK
        '405':
          description: Invalid request. Use a POST request.
        '401':
          description: Credentials not provided.
        '400':
          description: Other paramater not specified.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - message
                - chatroom
              properties:
                token:
                  type: string
                  # Using OAuth2
                  description: 'The session token of your user. Log in using the login API first to get a session token.'
                  example: 'd50d9fd00acf797ac409d5890fcc76669b727e63'
                message:
                  type: string
                  description: 'The content of the message. Images and videos should be URLs.'
                  example: 'Hi there!'
                chatroom:
                  type: integer
                  format: int64
                  description: 'ID of the chatroom that you want to send the message in.'
                  example: 101
                # TODO: add more stuff
                
components: 
  securitySchemes: 
    dispatch_auth:
      description: |
        Get access to data while protecting your account credentials.
        OAuth2 is also a safer and more secure way to give you access.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://dispatch.eu.org/api/oauth/dialog'
          scopes:
            'write:dispatch': modify user info in your account and send messages
            'read:dispatch': read your messages, chat and others